Class :testNG gruplandırma:
package org.rd.lessons.Lesson18Odev13;

import org.testng.annotations.Test;

public class BonuHesabiTest {

    @Test(groups = {"Grup A"})

    public void test1() {

        System.out.println("Test 1");
    }

    @Test(groups = {"Grup B"})

    public void test2() {

        System.out.println("Test 2");
    }

    @Test(groups = {"Grup C","Grup A"})

    public void test3() {

        System.out.println("Test 3");
    }
}




testng.xml dosyası ıcıne:

<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">

<suite name="Suite1" verbose="1">
    <test name="TestNG">
        <classes>
            <class name="org.rd.lessons.Lesson18OzzySeleniumicinTestNGFramework.CorrectTestNG"/>
        </classes>
    </test>

</suite

===========================
TestNG nin yapısı ve Eklenmesi
TestNG Annotations
XML olusturma
Include ve Exclude Metodlar
------------
yapılanlar:
Kendi TestNG xml ni demoqa.com testi uzerinde olusturdum
Daha sonra kodları TestNG uzeriden calıstırdım.
testng deki java class ından calıstırmadım, TestNG.xml dosyasından
 calıstırdım
kendı testNG xml ornekdeki gibi olusturdum
ve projeme entegre ettim daha sonrasında kodalrımız testng.xml üzerinden
calıstırabılırız, jaca class uzerinde aynı avantajı saglamıyor!


====
XML DISARIDAN CALISTIRMAYA OLANAK SAGLIYOR

=====
@DATAPROVİDER
ayni case farkli durumlarda data icin farkli konfigruayonalar  calistirmamıza gerek durumlardsa data provıder
kullanarak tek bır senaryo yazıyoruz o senaryoyo data drıve r yapısıdan tekrar tekrar kosuyoruz